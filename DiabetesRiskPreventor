#Reys Aden
#Dataset Used https://www.kaggle.com/datasets/tanshihjen/early-stage-diabetes-risk-prediction

import sklearn
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

# Load the dataset
data = pd.read_csv("diabetes_risk_prediction_dataset.csv")

# Label encoding
le = preprocessing.LabelEncoder()
features = ['Gender', 'Polyuria', 'Polydipsia', 'Sudden_Weight_Loss', 'Weakness', 'Polyphagia', 'Genital_Thrush', 'Visual_Blurring', 'Itching', 'Irritability', 'Delayed_Healing', 'Partial_Paresis', 'Muscle_Stiffness', 'Alopecia', 'Obesity']
for feature in features:
    data[feature] = le.fit_transform(data[feature])

le_class = preprocessing.LabelEncoder()
data['Class'] = le_class.fit_transform(data['Class'])

# Features and target variable
X = data[features]
y = data['Class']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.1, random_state=42)

# Create KNN model
model = KNeighborsClassifier(n_neighbors=9)

# Train the model
model.fit(x_train, y_train)

# Evaluate the model
accuracy = model.score(x_test, y_test)
print(accuracy)

# Make predictions on the test set
predicted = model.predict(x_test)

# Decode the class labels
decoded_predicted = le_class.inverse_transform(predicted)
decoded_actual = le_class.inverse_transform(y_test)

# Display predictions and actual values
for i in range(len(decoded_predicted)):
    symptoms = x_test.iloc[i].to_dict()
    print(f"Predicted result: {decoded_predicted[i]}, Symptoms: {symptoms}, Actual result: {decoded_actual[i]}")
