#Reys Aden
#DataSet Used https://www.kaggle.com/datasets/kanths028/usa-housing

import pandas as pd
import numpy as np
import sklearn
from sklearn import linear_model
from sklearn.utils import shuffle
import matplotlib.pyplot as pyplot
import pickle
from matplotlib import style

data = pd.read_csv("USA_Housing.csv")
#trimming our data
data = data[["Avg.AreaIncome", "AreaPopulation", "Price", "Avg.AreaHouseAge", "Avg.AreaNumberofRooms","Avg.AreaNumberofBedrooms"]]
#seperating our data
predict = "Price"

X = np.array(data.drop(columns=[predict]))
y = np.array(data[predict])
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.1)
'''
best = 0
for _ in range(20):
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size=0.1)

    linear = linear_model.LinearRegression()

    linear.fit(x_train, y_train)
    acc = linear.score(x_test, y_test)
    print("Accuracy: " + str(acc))
    
    # If the current model has a better score than one we've already trained then save it
    if acc > best:
        best = acc
        with open("studentgrades.pickle", "wb") as f:
            pickle.dump(linear, f)'''

pickle_in = open("studentmodel.pickle", "rb")
linear = pickle.load(pickle_in)

print("Co: \n" , linear.coef_)
print("intercept: \n" , linear.intercept_)

predictions = linear.predict(x_test) # Gets a list of all predictions

for x in range(len(predictions)):
    print(predictions[x], x_test[x], y_test[x])

#Draw and Plotting the model
p = "Avg.AreaIncome" #Change this to see other graphs 
style.use("ggplot")
pyplot.scatter(data[p],data["Price"])
pyplot.xlabel(p)
pyplot.ylabel("Guessed Price")
pyplot.show()
